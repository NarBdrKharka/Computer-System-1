nar-bdr-kharka@narbdrkharka-Inspiron-3576:~/Desktop/2021(5th) semster/Computer System1/Assignment 1_2/Assignment 1/bomb002$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) b phase_2
Breakpoint 1 at 0x400ea9
(gdb) r answer.txt
Starting program: /home/nar-bdr-kharka/Desktop/2021(5th) semster/Computer System1/Assignment 1_2/Assignment 1/bomb002/bomb answer.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
1 2 3 4 5 6

Breakpoint 1, 0x0000000000400ea9 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
=> 0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) u*0x0000000000400ec7
0x0000000000400ec7 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
=> 0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
=> 0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--ni
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ecb in phase_2 ()
(gdb) ni
0x0000000000400ed2 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
=> 0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
=> 0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
=> 0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400ed5 in phase_2 ()
(gdb) ni
0x0000000000400eda in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
=> 0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) ni
0x0000000000400edc in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
=> 0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x1                 1
rbx            0x7fffffffdd10      140737488346384
rcx            0x0                 0
rdx            0x7fffffffdd24      140737488346404
rsi            0x0                 0
rdi            0x7fffffffd6a0      140737488344736
rbp            0x7fffffffdd24      0x7fffffffdd24
rsp            0x7fffffffdd10      0x7fffffffdd10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde40      140737488346688
r14            0x0                 0
r15            0x0                 0
rip            0x400edc            0x400edc <phase_2+51>
--Type <RET> for more, q to quit, c to continue without paging--c
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/3d
Argument required (starting display address).
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
=> 0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x1                 1
rbx            0x7fffffffdd10      140737488346384
rcx            0x0                 0
rdx            0x7fffffffdd24      140737488346404
rsi            0x0                 0
rdi            0x7fffffffd6a0      140737488344736
rbp            0x7fffffffdd24      0x7fffffffdd24
rsp            0x7fffffffdd10      0x7fffffffdd10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde40      140737488346688
r14            0x0                 0
r15            0x0                 0
rip            0x400edc            0x400edc <phase_2+51>
--Type <RET> for more, q to quit, c to continue without paging--c
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 140737488346384
0x7fffffffdd10:	1
(gdb) ni
0x0000000000400ede in phase_2 ()
(gdb) ni
0x0000000000400ee1 in phase_2 ()
(gdb)  disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
=> 0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
=> 0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdd10      140737488346384
rcx            0x0                 0
rdx            0x7fffffffdd24      140737488346404
rsi            0x0                 0
rdi            0x7fffffffd6a0      140737488344736
rbp            0x7fffffffdd24      0x7fffffffdd24
rsp            0x7fffffffdd10      0x7fffffffdd10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde40      140737488346688
r14            0x0                 0
r15            0x0                 0
rip            0x400ee1            0x400ee1 <phase_2+56>
--Type <RET> for more, q to quit, c to continue without paging--c
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
=> 0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdd10      140737488346384
rcx            0x0                 0
rdx            0x7fffffffdd24      140737488346404
rsi            0x0                 0
rdi            0x7fffffffd6a0      140737488344736
rbp            0x7fffffffdd24      0x7fffffffdd24
rsp            0x7fffffffdd10      0x7fffffffdd10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde40      140737488346688
r14            0x0                 0
r15            0x0                 0
rip            0x400ee1            0x400ee1 <phase_2+56>
--Type <RET> for more, q to quit, c to continue without paging--c
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) ni
0x0000000000400ee8 in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
=> 0x0000000000400ee8 <+63>:	add    $0x4,%rbx
   0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdd10      140737488346384
rcx            0x0                 0
rdx            0x7fffffffdd24      140737488346404
rsi            0x0                 0
rdi            0x7fffffffd6a0      140737488344736
rbp            0x7fffffffdd24      0x7fffffffdd24
rsp            0x7fffffffdd10      0x7fffffffdd10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde40      140737488346688
r14            0x0                 0
r15            0x0                 0
rip            0x400ee8            0x400ee8 <phase_2+63>
--Type <RET> for more, q to quit, c to continue without paging--c
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) x/d 140737488346384
0x7fffffffdd10:	1
(gdb) ni
0x0000000000400eec in phase_2 ()
(gdb) disas
Dump of assembler code for function phase_2:
   0x0000000000400ea9 <+0>:	push   %rbp
   0x0000000000400eaa <+1>:	push   %rbx
   0x0000000000400eab <+2>:	sub    $0x28,%rsp
   0x0000000000400eaf <+6>:	mov    %fs:0x28,%rax
   0x0000000000400eb8 <+15>:	mov    %rax,0x18(%rsp)
   0x0000000000400ebd <+20>:	xor    %eax,%eax
   0x0000000000400ebf <+22>:	mov    %rsp,%rsi
   0x0000000000400ec2 <+25>:	callq  0x40145a <read_six_numbers>
   0x0000000000400ec7 <+30>:	cmpl   $0x1,(%rsp)
   0x0000000000400ecb <+34>:	je     0x400ed2 <phase_2+41>
   0x0000000000400ecd <+36>:	callq  0x401438 <explode_bomb>
   0x0000000000400ed2 <+41>:	mov    %rsp,%rbx
   0x0000000000400ed5 <+44>:	lea    0x14(%rsp),%rbp
   0x0000000000400eda <+49>:	mov    (%rbx),%eax
   0x0000000000400edc <+51>:	add    %eax,%eax
   0x0000000000400ede <+53>:	cmp    %eax,0x4(%rbx)
--Type <RET> for more, q to quit, c to continue without paging--c
   0x0000000000400ee1 <+56>:	je     0x400ee8 <phase_2+63>
   0x0000000000400ee3 <+58>:	callq  0x401438 <explode_bomb>
   0x0000000000400ee8 <+63>:	add    $0x4,%rbx
=> 0x0000000000400eec <+67>:	cmp    %rbp,%rbx
   0x0000000000400eef <+70>:	jne    0x400eda <phase_2+49>
   0x0000000000400ef1 <+72>:	mov    0x18(%rsp),%rax
   0x0000000000400ef6 <+77>:	xor    %fs:0x28,%rax
   0x0000000000400eff <+86>:	je     0x400f06 <phase_2+93>
   0x0000000000400f01 <+88>:	callq  0x400b00 <__stack_chk_fail@plt>
   0x0000000000400f06 <+93>:	add    $0x28,%rsp
   0x0000000000400f0a <+97>:	pop    %rbx
   0x0000000000400f0b <+98>:	pop    %rbp
   0x0000000000400f0c <+99>:	retq   
End of assembler dump.
(gdb) i r
rax            0x2                 2
rbx            0x7fffffffdd14      140737488346388
rcx            0x0                 0
rdx            0x7fffffffdd24      140737488346404
rsi            0x0                 0
rdi            0x7fffffffd6a0      140737488344736
rbp            0x7fffffffdd24      0x7fffffffdd24
rsp            0x7fffffffdd10      0x7fffffffdd10
r8             0xffffffff          4294967295
r9             0x0                 0
r10            0x7ffff7f60ac0      140737353484992
r11            0x0                 0
r12            0x400c60            4197472
r13            0x7fffffffde40      140737488346688
r14            0x0                 0
r15            0x0                 0
rip            0x400eec            0x400eec <phase_2+67>
--Type <RET> for more, q to quit, c to continue without paging--c
eflags         0x206               [ PF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) delete
Delete all breakpoints? (y or n) y
(gdb) 1 2 4 8 16 32
Undefined command: "1".  Try "help".
(gdb) q
A debugging session is active.

	Inferior 1 [process 8703] will be killed.

Quit anyway? (y or n) y
nar-bdr-kharka@narbdrkharka-Inspiron-3576:~/Desktop/2021(5th) semster/Computer System1/Assignment 1_2/Assignment 1/bomb002$ gdb bomb
GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from bomb...
(gdb) r answer.txt
Starting program: /home/nar-bdr-kharka/Desktop/2021(5th) semster/Computer System1/Assignment 1_2/Assignment 1/bomb002/bomb answer.txt
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
1 2 4 8 16 32
That's number 2.  Keep going!
